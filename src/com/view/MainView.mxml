<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:view="com.view.*"
		 width="100%"
		 height="100%"
		 currentState="Login"
		 height.Logged="100%"
		 creationComplete="group1_creationCompleteHandler(event)"
		 minWidth="640"
		 xmlns:customComponent="customComponent.*"
		 xmlns:home="com.view.home.*"
		 xmlns:login="com.view.login.*"
		 xmlns:visitList="com.view.visitList.*" xmlns:chatWindow="com.view.chatWindow.*" xmlns:agent="com.view.agent.*">



	<fx:Script>
		<![CDATA[
			import Interface.Icontact;
			
			import com.controller.ChatWindowController;
			import com.controller.MainController;
			import com.controller.TimerController;
			import com.event.ChatManagerEvent;
			import com.event.MainEvent;
			import com.event.customComponent.TabBarChatEvent;
			import com.model.ChatManagerModel;
			import com.model.LoginModel;
			import com.model.MainModel;
			import com.view.chatWindow.ChatWindowView;
			
			import customComponent.LoadWait;
			
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectProxy;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import org.igniterealtime.xiff.core.EscapedJID;
			import org.igniterealtime.xiff.core.UnescapedJID;
			import org.igniterealtime.xiff.data.Message;
			
			import renderer.ChatRenderer;
			
			import service.ServiceEchat;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import util.DateManager;
			import util.app.ConfigParameters;
			import util.classes.Chat;
			import util.classes.QueueChat;
			import util.classes.User;
			import util.classes.WorkSpaceDomain;
			import util.classes.functionReturn.UserDomain;



			private var loadWait:LoadWait;

			[Bindable]
			[Inject]
			public var mainModel:MainModel;


			[Bindable]
			[Inject]
			public var mainController:MainController;


			[Bindable]
			[Inject]
			public var loginModel:LoginModel;

			
			[Bindable]
			[ViewAdded]
			public var chatWindowView:ChatWindowView;

			
			
			[Bindable]
			[Inject]
			public var chatWindowController:ChatWindowController;

			
			[Bindable]
			[Inject]
			public var timerController:TimerController;
			
			public var is_writing:Boolean=false;
			



/*
			[EventHandler(event="LoginEvent.loginSuccess")]
			public function loginEvent_loginSuccess():void
			{
				
				  /// typicalItem=new ChatVO();
				 ///  typicalItem.body="dsadasdasd sa dsadsa dsa sa " + "dsadasdasdasdsa " +
				 //  "ds " + "ad sad " + "sadsad   ds ds" + " ad as" +
				 //  " das das " + "das d " + "asd asd " + "as das da" + " sd " + "asd " + "sad" + " as a "
				 

			
				

			}

           */
			



			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				//asigno esta profundidad para que este debajo de la barra del chat
				

			}


			public function showLoad():void
			{

				if (!loadWait)
				{
					loadWait=new LoadWait();

					this.addElement(loadWait);

					this.mouseChildren=false;
					this.tabChildren=false;

				}
			}



			public function removeLoad():void
			{


				if (loadWait)
				{

					this.removeElement(loadWait);
					loadWait=null;

					this.mouseChildren=true;
					this.tabChildren=true;

				}
			}



			public function addChatWindow():void
			{

			




			}


			



			private function serviceEchat_testHandler(result:Object):void
			{

				trace(ObjectUtil.toString(result));


			}


			//-----------------------------------------------------------------------------------------------------------------------click menu 
			
			
			protected function hGroupMenu_home_clickHandler(event:MouseEvent):void
			{
				if (viewStack_navigator.selectedChild != navigatorContent_home)
					viewStack_navigator.selectedChild=navigatorContent_home;


			}

			protected function list_domains_changeHandler(event:IndexChangeEvent):void
			{

				
			
				
				mainModel.currentWorkSpaceDomain=list_domains.selectedItem as WorkSpaceDomain;

				//pregunto si este dominio tiene un usuario activo en chat, si es asi abro la ventana
				if(!mainModel.currentWorkSpaceDomain.currentActiveContact)
				{
					group_chatWindow.visible = false;
					
				}
				
				
				
				timerController.updateTimer();
				
			}



			protected function groupMenuItem_visitList_clickHandler(event:MouseEvent):void
			{
				if (viewStack_navigator.selectedChild != navigatorContent_visitList)
					viewStack_navigator.selectedChild=navigatorContent_visitList;

			}
			
			protected function groupMenuItem_agent_clickHandler(event:MouseEvent):void
			{
				
				
				if (viewStack_navigator.selectedChild != navigatorContent_agent)
					viewStack_navigator.selectedChild=navigatorContent_agent;
				
			}
			
			
			
			
		
			
			
			
			
			
			
			//----------------------------------------------------------------------------------------------------------------------
			
			
		
			
			
			protected function tabBar_queueChat_closeHandler(event:TabBarChatEvent):void
			{
				
		          
				
				chatWindowController.closeChatWindow(event.contact);
				
				
			}
			
			
			
			
			
			protected function tabBar_queueChat_changeHandler(event:IndexChangeEvent):void
			{
				
			//	trace(tabBar_queueChat.selectedIndex)
				var contact:Icontact = tabBar_queueChat.selectedItem ;
				
				
				//	trace("aver : " + mainModel.currentWorkSpaceDomain.currentActiveUser)
				if(contact)
				{
					
					trace("abre")
					mainModel.currentWorkSpaceDomain.currentActiveContact = contact;
					
					if(!group_chatWindow.visible)
					group_chatWindow.visible = true;
					
					chatWindowView.dataChange();
					
				}
				else
				{
					
					
					trace("cierra")
					mainModel.currentWorkSpaceDomain.currentActiveContact = null;
					group_chatWindow.visible = false;
					
					
					
					
					
				}
				
				
				
				
			
			}
			
			
			
			
			
		]]>
	</fx:Script>


	<s:states>
		<s:State name="Login"/>
		<s:State name="Logged"/>
	</s:states>





	<fx:Declarations>



	</fx:Declarations>


	<login:LoginView includeIn="Login"
					 horizontalCenter="0"
					 verticalCenter="0"/>

	<s:Group id="group_logged"
			 includeIn="Logged"
			 left="0"
			 right="0"
			 top="0"
			 bottom="0">



		<s:HGroup left="0"
				  right="0"
				  top="0"
				  bottom="0"
				  gap="0"
				  depth="1">




          <s:VGroup width="180" height="100%" gap="2">
			  
		  
			<s:SkinnableContainer width="100%"
								  height="100%"
								  backgroundColor="#3D3D3D">

				<s:Scroller width="100%"
							height="100%"
							horizontalScrollPolicy="off">


					<s:VGroup width="100%"
							  height="100%">



						<s:Group width="100%"
								 height="155">
							<s:Label top="10"
									 color="#FFFFFF"
									 fontSize="22"
									 horizontalCenter="0"
									 text="eChat"/>
							<s:Image id="image_agentAvatar"
									 x="0"
									 top="35"
									 bottom="0"
									 width="100%"/>
						</s:Group>
						<s:Spacer height="10"/>
						<s:Label fontSize="14"
								 fontWeight="bold"
								 text="Dominios"/>
						<s:List width="100%"
								height="100"
								contentBackgroundAlpha="1.0"
								id="list_domains"
								 requireSelection="true"
								
								change="list_domains_changeHandler(event)"
								dataProvider="{mainModel.arrayCollection_workSpacedomains}"
								itemRenderer="renderer.DomainRenderer"
								contentBackgroundColor="#686868"/>
						<s:VGroup width="100%" gap="0">
							
						
						<customComponent:groupMenu width="100%"
												   height="30"
												   id="group_menuItemHome"
												   click="hGroupMenu_home_clickHandler(event)">
							<s:Label left="45"
									 color="#FFFFFF"
									 text="Pagina principal"
									 verticalCenter="0"/>
							<mx:HRule left="0"
									  right="0"
									  bottom="0"
									  shadowColor="#5A5A5A"
									  strokeColor="#000000"/>
						</customComponent:groupMenu>
						<customComponent:groupMenu width="100%"
												   height="30"
												   id="groupMenuItem_visitList"
												   click="groupMenuItem_visitList_clickHandler(event)">
							<s:Label left="45"
									 color="#FFFFFF"
									 text="Lista de visitantes"
									 verticalCenter="0"/>
							<mx:HRule left="0"
									  right="0"
									  bottom="0"
									  shadowColor="#5A5A5A"
									  strokeColor="#000000"/>
						</customComponent:groupMenu>
						<customComponent:groupMenu width="100%"
												   height="30"
												   id="groupMenuItem_history"
												   click="hGroupMenu_home_clickHandler(event)">
							<s:Label left="45"
									 color="#FFFFFF"
									 text="Historial"
									 verticalCenter="0"/>
							<mx:HRule left="0"
									  right="0"
									  bottom="0"
									  shadowColor="#5A5A5A"
									  strokeColor="#000000"/>
						</customComponent:groupMenu>
						</s:VGroup>
						<s:VGroup width="100%">


							<s:Spacer width="10"
									  height="5"/>
							<s:Label fontSize="14"
									 fontWeight="bold"
									 text="Administrar"/>
							<s:Spacer width="10"
									  height="5"/>
							<s:VGroup id="vGroup_menuAdminister" width="100%" gap="0">
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_agent"
														    click="groupMenuItem_agent_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Agentes"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_history4"
														   click="hGroupMenu_home_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Departamentos"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_history1"
														   click="hGroupMenu_home_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Accesos directos"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_history2"
														   click="hGroupMenu_home_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Visitantes bloqueados"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_history3"
														   click="hGroupMenu_home_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Disparadores"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
							</s:VGroup>
						</s:VGroup>
						<s:VGroup width="100%">


							<s:Spacer width="10"
									  height="5"/>
							<s:Label fontSize="14"
									 fontWeight="bold"
									 text="Configuraciones"/>
							<s:Spacer width="10"
									  height="5"/>
							<s:VGroup id="vGroup_menuAdminister0" width="100%" gap="0">
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_history5"
														   click="hGroupMenu_home_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Widget"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_history6"
														   click="hGroupMenu_home_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Personal"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
								<customComponent:groupMenu width="100%"
														   height="22"
														   id="groupMenuItem_history7"
														   click="hGroupMenu_home_clickHandler(event)">
									<s:Label left="45"
											 color="#FFFFFF"
											 text="Cuenta"
											 verticalCenter="0"/>
								</customComponent:groupMenu>
							</s:VGroup>
						</s:VGroup>
					


					</s:VGroup>
				</s:Scroller>

			</s:SkinnableContainer>
		
			  
			  
			  <s:BorderContainer height="32"
								 id="borderContainer_queueChat"
								 width="100%"
								 backgroundColor="#888888"
								
								 cornerRadius="2">
				  
				  <s:Label 
						   color="#FFFFFF"
						   fontSize="11"
						   fontWeight="bold"
						   horizontalCenter="0"
						   text="{mainModel.currentWorkSpaceDomain.arrayCollection_queueCall.length == 0 ? 'NO HAY PETICIONES DE CHAT ' : 'ATENDER PETICIONES DE CHAT ' +mainModel.currentWorkSpaceDomain.arrayCollection_queueCall.length}"
						   textAlign="center"
						   verticalAlign="middle"
						   verticalCenter="0"/>
				  <!--
				  <customComponent:BusyIndicator bottom="2" width="12" height="12" horizontalCenter="0"  id="busyIndicator_queueChat"/>
				  -->
			  </s:BorderContainer>
		  </s:VGroup>
				
			<s:VGroup width="100%" height="100%" gap="2">
				
					
				<mx:ViewStack width="100%"
							  height="100%"
							  id="viewStack_navigator"
							  selectedIndex="0">
					
					<s:NavigatorContent id="navigatorContent_home">
						
						<home:HomeView/>
						
						
					</s:NavigatorContent>
					
					<s:NavigatorContent id="navigatorContent_visitList">
						
						<visitList:VisitListView/>
						
					</s:NavigatorContent>
					
					
					<s:NavigatorContent id="navigatorContent_agent">
					
						<agent:AgentListView/>
						
					</s:NavigatorContent>
					
					
				</mx:ViewStack>
				
			
					
					
					
					
					<customComponent:TabBarChat id="tabBar_queueChat"
							 
							  width="100%" height="42"
							    requireSelection="false"
							    change="tabBar_queueChat_changeHandler(event)"
							  dataProvider="{mainModel.currentWorkSpaceDomain.arrayCollection_queueChat}"
							 minWidth="140"
							   itemRenderer="renderer.TabChatRenderer"
							      
								 close="tabBar_queueChat_closeHandler(event)"
							>
						<customComponent:layout>
							
					
						
							<s:HorizontalLayout gap="0" verticalAlign="bottom"/>
						
                      </customComponent:layout>
						
						
					</customComponent:TabBarChat>

			</s:VGroup>
		
		<s:Group id="group_chatWindow" visible="false" width="{group_chatWindow.visible ? 730 : 0}" height="100%" minWidth="0">
			
			<chatWindow:ChatWindowView   visible="{group_chatWindow.visible}"/>
			
		</s:Group>

		</s:HGroup>




	</s:Group>






</s:Group>
